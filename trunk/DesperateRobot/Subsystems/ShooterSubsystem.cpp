// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.




#include "ShooterSubsystem.h"
#include "../Robotmap.h"


ShooterSubsystem::ShooterSubsystem() : Subsystem("ShooterSubsystem") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	upperLimitSwitch = RobotMap::shooterSubsystemUpperLimitSwitch;
	lowerLimitSwitch = RobotMap::shooterSubsystemLowerLimitSwitch;
	shooterMotor = RobotMap::shooterSubsystemShooterMotor;
	triggerSolenoid = RobotMap::shooterSubsystemTriggerSolenoid;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	CheckLowerLimitSwitch();
}
    
void ShooterSubsystem::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void ShooterSubsystem::SetShooterMotorVoltage(float voltage) {
	if ((voltage > 0.0) && CheckUpperLimitSwitch()) {
		voltage = 0.0;
	}
	else if ((voltage < 0.0) && CheckLowerLimitSwitch()) {
		voltage = 0.0;
	}
	shooterMotor->Set(voltage);
	
}


// Put methods for controlling this subsystem
// here. Call these from Commands.
bool ShooterSubsystem::CheckUpperLimitSwitch()
{
	uint32_t switchState = upperLimitSwitch->Get();
		// This assumes the limit switch is normally closed
		// and reading non-zero
		// When it reads zero, the switch is open, inidicating the limit was hit.
		return (switchState != 0) ? false : true;
}

bool ShooterSubsystem::CheckLowerLimitSwitch()
{
	uint32_t switchState = lowerLimitSwitch->Get();
		// This assumes the limit switch is normally closed
		// and reading non-zero
		// When it reads zero, the switch is open, inidicating the limit was hit.
		armed = (switchState != 0) ? false : true;
		return armed;
}


void ShooterSubsystem::ReleaseTrigger()
{
	triggerSolenoid->Set(true);
	Wait(0.2);
	triggerSolenoid->Set(false);
}
