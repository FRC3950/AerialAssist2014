// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc3950.Robot2013;
import org.usfirst.frc3950.Robot2013.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;
/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton shiftHigh;
    public JoystickButton shiftLow;
    public Joystick leftDrive;
    public JoystickButton shiftHigh2;
    public JoystickButton shiftLow2;
    public Joystick rightDrive;
    public JoystickButton wheel1Plus;
    public JoystickButton wheel1Minus;
    public JoystickButton stopWheel1;
    public JoystickButton wheel2Plus;
    public JoystickButton wheel2Minus;
    public JoystickButton stopWheel2;
    public JoystickButton rollBelt;
    public JoystickButton reverseBelt;
    public JoystickButton stopBelt;
    public JoystickButton stopBelt2;
    public JoystickButton stopBelt3;
    public Joystick shooterStick;
    public JoystickButton pushForward;
    public JoystickButton pullBack;
    public Joystick climberStick;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        climberStick = new Joystick(4);
        
        pullBack = new JoystickButton(climberStick, 9);
        pullBack.whenPressed(new ClimberSolenoidCancel());
        pushForward = new JoystickButton(climberStick, 8);
        pushForward.whenPressed(new ClimberSolenoidFire());
        shooterStick = new Joystick(3);
        
        stopBelt3 = new JoystickButton(shooterStick, 3);
        stopBelt3.whenReleased(new ConveyorBeltDoNothing());
        stopBelt2 = new JoystickButton(shooterStick, 2);
        stopBelt2.whenReleased(new ConveyorBeltDoNothing());
        stopBelt = new JoystickButton(shooterStick, 1);
        stopBelt.whenReleased(new ConveyorBeltDoNothing());
        reverseBelt = new JoystickButton(shooterStick, 2);
        reverseBelt.whileHeld(new ConveyorBeltBackwards());
        rollBelt = new JoystickButton(shooterStick, 1);
        rollBelt.whileHeld(new ConveyorBeltForwards());
        stopWheel2 = new JoystickButton(shooterStick, 9);
        stopWheel2.whenPressed(new Wheel2Stop());
        wheel2Minus = new JoystickButton(shooterStick, 10);
        wheel2Minus.whileHeld(new Wheel2Slow());
        wheel2Plus = new JoystickButton(shooterStick, 11);
        wheel2Plus.whileHeld(new Wheel2Fast());
        stopWheel1 = new JoystickButton(shooterStick, 8);
        stopWheel1.whenPressed(new Wheel1Stop());
        wheel1Minus = new JoystickButton(shooterStick, 7);
        wheel1Minus.whileHeld(new Wheel1Slow());
        wheel1Plus = new JoystickButton(shooterStick, 6);
        wheel1Plus.whileHeld(new Wheel1Fast());
        rightDrive = new Joystick(2);
        
        shiftLow2 = new JoystickButton(rightDrive, 2);
        shiftLow2.whenPressed(new ShiftDown());
        shiftHigh2 = new JoystickButton(rightDrive, 3);
        shiftHigh2.whenPressed(new ShiftUp());
        leftDrive = new Joystick(1);
        
        shiftLow = new JoystickButton(leftDrive, 2);
        shiftLow.whenPressed(new ShiftDown());
        shiftHigh = new JoystickButton(leftDrive, 3);
        shiftHigh.whenPressed(new ShiftUp());
	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Air", new Air());
        SmartDashboard.putData("Climber Solenoid Fire", new ClimberSolenoidFire());
        SmartDashboard.putData("Climber Solenoid Cancel", new ClimberSolenoidCancel());
        SmartDashboard.putData("Climber Do Nothing", new ClimberDoNothing());
        SmartDashboard.putData("Climber Elevate", new ClimberElevate());
        SmartDashboard.putData("Drive", new Drive());
        SmartDashboard.putData("Shift Up", new ShiftUp());
        SmartDashboard.putData("Shift Down", new ShiftDown());
        SmartDashboard.putData("Conveyor Belt Forwards", new ConveyorBeltForwards());
        SmartDashboard.putData("Conveyor Belt Backwards", new ConveyorBeltBackwards());
        SmartDashboard.putData("Conveyor Belt Do Nothing", new ConveyorBeltDoNothing());
        SmartDashboard.putData("Wheel 1 Fast", new Wheel1Fast());
        SmartDashboard.putData("Wheel 1 Slow", new Wheel1Slow());
        SmartDashboard.putData("Wheel 1 Stop", new Wheel1Stop());
        SmartDashboard.putData("Wheel 2 Fast", new Wheel2Fast());
        SmartDashboard.putData("Wheel 2 Slow", new Wheel2Slow());
        SmartDashboard.putData("Wheel 2 Stop", new Wheel2Stop());
        SmartDashboard.putData("Incline Shooter", new InclineShooter());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getLeftDrive() {
        return leftDrive;
    }
    public Joystick getRightDrive() {
        return rightDrive;
    }
    public Joystick getShooterStick() {
        return shooterStick;
    }
    public Joystick getClimberStick() {
        return climberStick;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public double getLeftSpeed() {
        return leftDrive.getY();
    }
    public double getRightSpeed() {
        return rightDrive.getY();
    }
    public double getShooterSpeed() {
        return shooterStick.getY();
    }
    
    public double getClimberSpeed() {
        return climberStick.getY();
    }
}
