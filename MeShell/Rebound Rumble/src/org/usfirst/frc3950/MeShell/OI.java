// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc3950.MeShell;
import org.usfirst.frc3950.MeShell.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;
/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick leftDrive;
    public Joystick rightDrive;
    public JoystickButton rollerForward;
    public JoystickButton rollerBackwards;
    public Joystick armsStick;
    public JoystickButton launchBall;
    public JoystickButton autoShot;
    public Joystick shootStick;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        shootStick = new Joystick(4);
        
        autoShot = new JoystickButton(shootStick, 5);
        autoShot.whenPressed(new AutoShootCommandGroup());
        launchBall = new JoystickButton(shootStick, 1);
        launchBall.whenPressed(new FirePiston());
        armsStick = new Joystick(3);
        
        rollerBackwards = new JoystickButton(armsStick, 2);
        rollerBackwards.whileHeld(new ReverseRollers());
        rollerForward = new JoystickButton(armsStick, 1);
        rollerForward.whileHeld(new SpinRollers());
        rightDrive = new Joystick(2);
        
        leftDrive = new Joystick(1);
        
	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Drive", new Drive());
        SmartDashboard.putData("Move Arm", new MoveArm());
        SmartDashboard.putData("Spin Rollers", new SpinRollers());
        SmartDashboard.putData("Reverse Rollers", new ReverseRollers());
        SmartDashboard.putData("Spin Shooter Wheels", new SpinShooterWheels());
        SmartDashboard.putData("Fire Piston", new FirePiston());
        SmartDashboard.putData("Auto Shoot Command Group", new AutoShootCommandGroup());
        SmartDashboard.putData("Autonomous", new Autonomous());
        SmartDashboard.putData("Air", new Air());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getLeftDrive() {
        return leftDrive;
    }
    public Joystick getRightDrive() {
        return rightDrive;
    }
    public Joystick getArmsStick() {
        return armsStick;
    }
    public Joystick getShootStick() {
        return shootStick;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public double getLeftSpeed() {
        return leftDrive.getY();
    }
    public double getRightSpeed() {
        return rightDrive.getY();
    }
    public double getArmsSpeed() {
        return armsStick.getY();
    }
    
    public double getShootSpeed() {
        return shootStick.getY();
    }
}
