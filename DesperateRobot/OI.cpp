// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "OI.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/DriveCommand.h"
#include "Commands/ResetGyroCommand.h"
#include "Commands/LaunchAngle.h"
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Commands/ToggleClaw.h"
#include "Commands/Launch.h"
#include "Commands/MoveArm.h"
#include "Commands/RollBallIn.h"
#include "Commands/RollBallOut.h"

OI::OI() {
	// Process operator interface input here.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	greenJoystick = new Joystick(1);
	greenJoystick->SetAxisChannel(Joystick::kTwistAxis, 3);	
	resetGyroButton = new JoystickButton(greenJoystick, 11);
	resetGyroButton->WhenPressed(new ResetGyroCommand());
	launchAngleButton = new JoystickButton(yellowJoystick, 7);
	launchAngleButton->WhenPressed(new LaunchAngle());
	yellowJoystick = new Joystick(3);
	
	redJoystick = new Joystick(2);
	
	blueJoystick = new Joystick(4);
	
     
        // SmartDashboard Buttons
	SmartDashboard::PutData("Autonomous Command", new AutonomousCommand());
	SmartDashboard::PutData("Drive Command", new DriveCommand());
	SmartDashboard::PutData("Reset Gyro Command", new ResetGyroCommand());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	rollBallInButton = new JoystickButton(yellowJoystick, 1);
	rollBallInButton->WhileHeld(new RollBallIn());
	rollBallOutButton = new JoystickButton(yellowJoystick, 2);
	rollBallOutButton->WhileHeld(new RollBallOut());
	autoLaunchButton = new JoystickButton(yellowJoystick, 7);
	autoLaunchButton->WhenPressed(new Launch());
	openClawButton = new JoystickButton(yellowJoystick, 3);
	openClawButton->WhenPressed(new ToggleClaw());
	
}
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
Joystick* OI::getGreenJoystick() {
	return greenJoystick;
}

Joystick* OI::getYellowJoystick() {
	return yellowJoystick;
}
Joystick* OI::getRedJoystick() {
	return redJoystick;
}
Joystick* OI::getBlueJoystick() {
	return blueJoystick;
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
float OI::GetDriveStickX()
{
	return greenJoystick->GetX();
}
float OI::GetDriveStickY()
{
	return greenJoystick->GetY();
}
float OI::GetDriveRotation()
{
	
	return greenJoystick->GetTwist();
}
float OI::GetArmSpeed()
{
	return yellowJoystick->GetY();
}
/*
bool OI::GetTopPositionButton()
{
	return yellowJoystick->GetRawButton(9);	
}
bool OI::GetShootPositionButton()
{
	return yellowJoystick->GetRawButton(6);	
}
bool OI::GetBottomPositionButton()
{
	return yellowJoystick->GetRawButton(9);	
}

bool OI::GetLaunchButton()
{
	return yellowJoystick->GetRawButton(7);
}

bool OI::GetOpenClawButton()
{
	return yellowJoystick->GetRawButton(3);
}

bool OI::GetRollOutButton()
{
	return yellowJoystick->GetRawButton(2);
}

bool OI::GetRollInButton()
{
	return yellowJoystick->GetRawButton(1);
}
*/
