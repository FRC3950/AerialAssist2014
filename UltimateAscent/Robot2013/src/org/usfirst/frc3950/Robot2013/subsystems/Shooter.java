// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc3950.Robot2013.subsystems;
import org.usfirst.frc3950.Robot2013.RobotMap;
import org.usfirst.frc3950.Robot2013.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;
import edu.wpi.first.wpilibj.smartdashboard.*;
import edu.wpi.first.wpilibj.command.Subsystem;
/**
 *
 */
public class Shooter extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController speedController1 = RobotMap.shooterSpeedController1;
    Encoder encoder1 = RobotMap.shooterEncoder1;
    PIDController wheel1 = RobotMap.shooterWheel1;
    SpeedController speedController2 = RobotMap.shooterSpeedController2;
    Encoder encoder2 = RobotMap.shooterEncoder2;
    PIDController wheel2 = RobotMap.shooterWheel2;
    SpeedController screwSpeedController = RobotMap.shooterScrewSpeedController;
    AnalogChannel potentiometer = RobotMap.shooterPotentiometer;
    PIDController shooterScrew = RobotMap.shooterShooterScrew;
    SpeedController belt = RobotMap.shooterBelt;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // Set the default command for a subsystem here.
        setDefaultCommand(new InclineShooter());
    }
    public void potentiometerReading() {
        System.out.println(potentiometer.getVoltage());
    }
    public void shooterManualSpeed(double height) {
        //shooterScrew.setSetpoint(height);
        screwSpeedController.set(height);
        //System.out.println("shooterManualSpeed: height = " + height);
    }
    public void conveyor(double speed) {
        belt.set(speed);
    }
    double speed1 = 0;
    public void shooterWheelOneIncreaseSpeed() {
        speed1 += .01;
        speedController1.set(speed1);
        System.out.println("Speed 1: " + speed1);
        if (speed1 >= 1) {
            speed1 = 1;
        }
    }
    public void shooterWheelOneDecreaseSpeed() {
        speed1 -= .01;
        speedController1.set(speed1);
        System.out.println("Speed 1: " + speed1);
        if (speed1 <= -1) {
            speed1 = -1;
        }
    }
    //////////////////////////////////////////////////
    double speed2 = 0;
    public void shooterWheelTwoDecreaseSpeed() {
        speed2 += .01;
        speedController2.set(speed2);
        System.out.println("Speed 2: " + -speed2);
        if (speed2 >= 1) {
            speed2 = 1;
        }
    }
    public void shooterWheelTwoIncreaseSpeed() {
        speed2 -= .01;
        speedController2.set(speed2);
        System.out.println("Speed 2: " + -speed2);
        if (speed2 <= -1) {
            speed2 = -1;
        }
    }
    public void stopWheelOne() {
        speed1 = 0;
        speedController1.set(speed1);
        System.out.println("Speed 1: " + speed1);
    }
    
    public void stopWheelTwo() {
        speed2 = 0;
        speedController2.set(speed2);
        System.out.println("Speed 2: " + -speed2);
    }
}
