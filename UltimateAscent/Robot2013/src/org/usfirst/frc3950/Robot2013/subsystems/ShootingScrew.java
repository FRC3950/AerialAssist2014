// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc3950.Robot2013.subsystems;
import org.usfirst.frc3950.Robot2013.RobotMap;
import org.usfirst.frc3950.Robot2013.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.smartdashboard.*;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
/**
 *
 */
public class ShootingScrew extends PIDSubsystem {
    private boolean angleLowerLimitHit = false;
    private double potFloor = 0.0;
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController screwSpeedController = RobotMap.shootingScrewScrewSpeedController;
    AnalogChannel potentiometer = RobotMap.shootingScrewPotentiometer;
    PIDController shooterScrew = RobotMap.shootingScrewShooterScrew;
    DigitalInput angleLowerLimit = RobotMap.shootingScrewAngleLowerLimit;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // Initialize your subsystem here
    public ShootingScrew() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("ShootingScrew", 1.0, 0.0, 0.0);
        setAbsoluteTolerance(0.2);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("Shooting Screw", "PIDSubsystem Controller", getPIDController());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }
    
    private boolean pollLimitSwitch() {
        boolean switchState = angleLowerLimit.get();
    //        System.out.println("bottomLimitSwitch.get() = " + switchState);
        angleLowerLimitHit = switchState;
        
        return angleLowerLimitHit;
    }

    private static final double HOME_FINDING_SPEED = 0.6;
    
    public void findHomePosition() {
        if (!pollLimitSwitch()) {
            screwSpeedController.set(HOME_FINDING_SPEED);
            while (!pollLimitSwitch()) {
                System.out.println("Moving the shooter down.");
            }
            
            screwSpeedController.set(0.0);
        }
        
        potFloor = returnPIDInput();
        System.out.println("potFloor = " + potFloor);
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new InclineShooter());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return potentiometer.getAverageVoltage();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }
    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        screwSpeedController.pidWrite(output);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }
    public void potentiometerReading() {
        //System.out.println("Angle: " + potentiometer.getVoltage() * 60);
        //System.out.println("Voltage: " + potentiometer.getVoltage());
    }
    
    private static final double MAX_ANGLE = 45.0;
    private static final double MIN_ANGLE = 0.0;
    
    public void setInclineAngle(double angle) {
            if (angle < MIN_ANGLE) {
            angle = MIN_ANGLE;
        }
        else if (angle > MAX_ANGLE) {
            angle = MAX_ANGLE;
        }
        
        System.out.println("Shooting Screw setting angle to " + angle + " degrees");
        
        double voltage = angleToVoltage(angle);
        
        shooterManualSpeed(voltage);
    }
    
    public void shooterManualSpeed(double voltage) {
        //shooterScrew.setSetpoint(height);
        if ((voltage > 0.0) && pollLimitSwitch()) {
            voltage = 0.0;
        }
            
        screwSpeedController.set(voltage);
        System.out.println("shooterManualSpeed: voltage = " + voltage);
    }
    
    private static final double VOLTS_PER_DEGREE_FACTOR = 0.0119;
    
    private double angleToVoltage(double angle) {
        double currPotReading = returnPIDInput();
        double scaledPot = currPotReading - potFloor;
        return scaledPot * VOLTS_PER_DEGREE_FACTOR * angle;
    }
    
    private double voltageToAngle(double voltage) {
        
        return voltage * 60;
    }
}
