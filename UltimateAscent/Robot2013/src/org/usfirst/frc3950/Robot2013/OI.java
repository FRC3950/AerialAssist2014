// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc3950.Robot2013;
import org.usfirst.frc3950.Robot2013.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;
/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton shiftHigh;
    public JoystickButton shiftLow;
    public Joystick leftDrive;
    public Joystick rightDrive;
    public JoystickButton automaticShot;
    public JoystickButton semiAutomaticShot;
    public JoystickButton mAXRange;
    public JoystickButton mAXHeight;
    public JoystickButton justShoot;
    public JoystickButton wheel1Plus;
    public JoystickButton wheel1Minus;
    public JoystickButton wheel2Plus;
    public JoystickButton wheel2Minus;
    public Joystick shooterStick;
    public JoystickButton joystickButton1;
    public Joystick climberStick;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        climberStick = new Joystick(4);
        
        joystickButton1 = new JoystickButton(climberStick, 1);
        joystickButton1.whenPressed(new ClimberPush());
        shooterStick = new Joystick(3);
        
        wheel2Minus = new JoystickButton(shooterStick, 12);
        wheel2Minus.whileHeld(new Wheel2Slow());
        wheel2Plus = new JoystickButton(shooterStick, 11);
        wheel2Plus.whileHeld(new Wheel2Fast());
        wheel1Minus = new JoystickButton(shooterStick, 7);
        wheel1Minus.whileHeld(new Wheel1Slow());
        wheel1Plus = new JoystickButton(shooterStick, 6);
        wheel1Plus.whileHeld(new Wheel1Fast());
        justShoot = new JoystickButton(shooterStick, 1);
        justShoot.whenPressed(new Shoot());
        mAXHeight = new JoystickButton(shooterStick, 9);
        mAXHeight.whenPressed(new Height());
        mAXRange = new JoystickButton(shooterStick, 8);
        mAXRange.whenPressed(new Range());
        semiAutomaticShot = new JoystickButton(shooterStick, 3);
        semiAutomaticShot.whileHeld(new SemiAutomatic());
        automaticShot = new JoystickButton(shooterStick, 4);
        automaticShot.whileHeld(new Automatic());
        rightDrive = new Joystick(2);
        
        leftDrive = new Joystick(1);
        
        shiftLow = new JoystickButton(leftDrive, 2);
        shiftLow.whenPressed(new ShiftDown());
        shiftHigh = new JoystickButton(leftDrive, 3);
        shiftHigh.whenPressed(new ShiftUp());
	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous", new Autonomous());
        SmartDashboard.putData("Air", new Air());
        SmartDashboard.putData("Climb", new Climb());
        SmartDashboard.putData("Cancel", new Cancel());
        SmartDashboard.putData("Drive", new Drive());
        SmartDashboard.putData("Shift Up", new ShiftUp());
        SmartDashboard.putData("Shift Down", new ShiftDown());
        SmartDashboard.putData("Automatic", new Automatic());
        SmartDashboard.putData("Semi Automatic", new SemiAutomatic());
        SmartDashboard.putData("Shoot", new Shoot());
        SmartDashboard.putData("Range", new Range());
        SmartDashboard.putData("Height", new Height());
        SmartDashboard.putData("Wheel 1 Fast", new Wheel1Fast());
        SmartDashboard.putData("Wheel 1 Slow", new Wheel1Slow());
        SmartDashboard.putData("Wheel 2 Fast", new Wheel2Fast());
        SmartDashboard.putData("Wheel 2 Slow", new Wheel2Slow());
        SmartDashboard.putData("Screw", new Screw());
        SmartDashboard.putData("Climber Push", new ClimberPush());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getLeftDrive() {
        return leftDrive;
    }
    public Joystick getRightDrive() {
        return rightDrive;
    }
    public Joystick getShooterStick() {
        return shooterStick;
    }
    public Joystick getClimberStick() {
        return climberStick;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    
    public double getLeftSpeed() {
        return leftDrive.getY();
    }
    
    public double getRightSpeed() {
        return rightDrive.getY();
    }
    
    public double getClimberSpeed() {
        return climberStick.getY();
    }
}
